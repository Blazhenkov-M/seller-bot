from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router, F
from aiogram.types import Message
from app.database.database import async_session
from app.database.models import Expense, Order
from app.core.bot_instance import bot
from app.services import get_admins

load_router = Router()

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
EXPENSE_CATEGORIES = {
    "salaries": "–ó–∞—Ä–ø–ª–∞—Ç—ã",
    "advertising": "–†–µ–∫–ª–∞–º–∞ –≤–Ω–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞",
    "warehouse_rent": "–ê—Ä–µ–Ω–¥–∞ —Å–∫–ª–∞–¥–∞",
    "communication": "–°–≤—è–∑—å/–∏–Ω—Ç–µ—Ä–Ω–µ—Ç",
    "services": "–°–µ—Ä–≤–∏—Å—ã (—ç–∫–≤–∞–π—Ä–∏–Ω–≥/–∫–æ–º–∏—Å—Å–∏–∏ –±–∞–Ω–∫–∞/–ü–û/CRM/–ø—Ä–æ–≥—Ä–∞–º–º—ã)",
    "other": "–ü—Ä–æ—á–µ–µ"
}


class ReportStates(StatesGroup):
    waiting_for_file = State()
    entering_amount = State()
    confirmation = State()


@load_router.callback_query(F.data == "load_report")
async def start_report(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xls –∏–ª–∏ .xlsx).")
    await state.set_state(ReportStates.waiting_for_file)


@load_router.message(ReportStates.waiting_for_file, F.document)
async def process_file_upload(msg: Message, state: FSMContext):
    file_id = msg.document.file_id
    await state.update_data(file_id=file_id, expenses={}, current_category=list(EXPENSE_CATEGORIES.keys())[0])
    await msg.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {EXPENSE_CATEGORIES[list(EXPENSE_CATEGORIES.keys())[0]]}.",
                     reply_markup=InlineKeyboardMarkup(
                         inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_amount")]]))
    await state.set_state(ReportStates.entering_amount)


@load_router.callback_query(F.data == "skip_amount")
async def skip_amount(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_category = data.get("current_category")
    expenses = data.get("expenses", {})
    expenses[current_category] = 0
    await state.update_data(expenses=expenses)
    await ask_next_category(callback.message, state)


@load_router.message(ReportStates.entering_amount, F.text)
async def enter_amount(msg: Message, state: FSMContext):
    data = await state.get_data()
    current_category = data.get("current_category")
    expenses = data.get("expenses", {})

    if msg.text.isdigit():
        expenses[current_category] = int(msg.text)
    else:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await state.update_data(expenses=expenses)
    await ask_next_category(msg, state)


async def ask_next_category(msg, state: FSMContext):
    data = await state.get_data()
    expenses = data.get("expenses", {})
    remaining_categories = [cat for cat in EXPENSE_CATEGORIES if cat not in expenses]

    if remaining_categories:
        next_category = remaining_categories[0]
        await state.update_data(current_category=next_category)
        await msg.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {EXPENSE_CATEGORIES[next_category]}",
                         reply_markup=InlineKeyboardMarkup(
                             inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_amount")]]))
    else:
        summary = "\n".join([f"{EXPENSE_CATEGORIES[cat]}: {amount}" for cat, amount in expenses.items()])
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_expenses")],
                [InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="restart_expenses")]
            ]
        )
        await msg.answer(f"–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:\n{summary}", reply_markup=keyboard)
        await state.set_state(ReportStates.confirmation)


@load_router.callback_query(F.data == "restart_expenses")
async def restart_expenses(callback: CallbackQuery, state: FSMContext):
    await state.update_data(expenses={}, current_category=list(EXPENSE_CATEGORIES.keys())[0])
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {EXPENSE_CATEGORIES[list(EXPENSE_CATEGORIES.keys())[0]]}.",
                                  reply_markup=InlineKeyboardMarkup(
                                      inline_keyboard=[
                                          [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_amount")]]))
    await state.set_state(ReportStates.entering_amount)


@load_router.callback_query(F.data == "confirm_expenses")
async def confirm_expenses(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    expenses = data.get("expenses", {})
    file_id = data.get("file_id")
    user_id = callback.from_user.id
    async with async_session() as session:
        new_order = Order(user_id=user_id)
        session.add(new_order)
        await session.flush()
        new_expense = Expense(
            user_id=user_id,
            order_id=new_order.id,
            **{key: expenses.get(key, 0) for key in EXPENSE_CATEGORIES}
        )
        session.add(new_expense)
        await session.commit()

    await callback.message.answer("‚úÖ –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await notify_admins(new_order.id, file_id, expenses, bot)
    await state.clear()


SUPER_ADMINS = {235886164, 5571245352}  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—ã


async def notify_admins(order_id: int, file_id: str, expenses: dict, bot):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
    db_admins = await get_admins.get_admins()
    all_admins = set(db_admins) | SUPER_ADMINS  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º–∏

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary = "\n".join([f"{EXPENSE_CATEGORIES.get(cat, cat)}: {amount}" for cat, amount in expenses.items()])
    message_text = f"üìä –ù–æ–≤—ã–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç\nüÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\nüí∞ –†–∞—Å—Ö–æ–¥—ã:\n{summary}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
    for admin_id in all_admins:
        try:
            await bot.send_message(admin_id, message_text)
            await bot.send_document(admin_id, file_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
