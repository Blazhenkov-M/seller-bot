import pytest
from datetime import datetime, timedelta
from unittest.mock import AsyncMock
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app.database.models import User, Subscription
from app.celery.notifications import notify_users_about_subscription


@pytest.fixture
async def mock_db_session(mocker):
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ë–î."""
    mock_session = AsyncMock(spec=AsyncSession)

    test_user = User(tg_id=123456, username="test_user")
    test_subscription = Subscription(
        user_id=test_user.tg_id,
        status=True,
        expires_at=datetime.utcnow() + timedelta(days=3)
    )

    # –ú–æ–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
    mock_session.execute.return_value.scalars.return_value.all.return_value = [test_user.tg_id]

    return mock_session


@pytest.mark.asyncio
async def test_notify_users_about_subscription(mocker, mock_db_session):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ."""
    mock_send_message = mocker.patch("app.core.bot_instance.bot.send_message", new_callable=AsyncMock)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –∑–∞–º–æ–∫–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
    await notify_users_about_subscription(mock_db_session)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ send_message –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑ —Å –Ω—É–∂–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    mock_send_message.assert_called_once_with(
        123456,
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üëáüèª",
        reply_markup=mocker.ANY
    )
